image: registry.gitlab.com/wildland/corex/wildland-core/builder:latest

variables:
  CARGO_FLAGS: ""
  CARGO_HOME: $CI_PROJECT_DIR/cargo
  CACHE_COMPRESSION_LEVEL: 'fastest'
  FF_USE_FASTZIP: 'true'
  GIT_STRATEGY: 'clone'

stages:
  - Build
  - Test
  - Bridges
  - Bindings
  - Deploy
  - docs

###############
# STAGE: Build
# This stage generates build artifacts which are used as a cache for further stages jobs.
# Jobs in this stage will run in parallel with some tests which do not dependant on those artifacts.
#
# The bindings build is a sanity build check. Its purpose is to ensure that the project
# compiles before moving to the Bridges stage which **much** more resource intensive due
# to parallel build of multiple targets.
#
x86_64 linux build:
  stage: Build
  tags:
    - docker
    - linux
    - metal
  except:
    - tags
  only:
    - master
    - merge_requests
  cache:
    key: x86_64-linux-build-cache-$CI_COMMIT_REF_SLUG
    paths:
      - cargo/
      - target/
    policy: push
  script:
    - cargo make build

x86_64 bindings build:
  stage: Build
  tags:
    - docker
    - linux
    - metal
  except:
    - tags
  only:
    - master
    - merge_requests
  cache:
    key: x86_64-bindings-build-cache-$CI_COMMIT_REF_SLUG
    paths:
      - cargo/
      - target/
    policy: push
  script:
    - cargo make --no-workspace bindings-linux

###############
# STAGE: Test
#
# This stage contains code sanity checks as well as automated tests.

cargo test:
  stage: Test
  tags:
    - docker
    - linux
    - metal
  needs: []
  except:
    - tags
  only:
    - master
    - merge_requests
  script:
    - cargo make test

cargo clippy (lint):
  stage: Test
  needs: ['x86_64 linux build']
  tags:
    - docker
    - linux
    - metal
  cache:
    key: x86_64-linux-build-cache-$CI_COMMIT_REF_SLUG
    paths:
      - cargo/
      - target/
    policy: pull
  except:
    - tags
  only:
    - master
    - merge_requests
  script:
    - cargo make clippy

cargo fmt (format):
  stage: Test
  tags:
    - docker
    - linux
    - metal
  needs: []
  except:
    - tags
  only:
    - master
    - merge_requests
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check

cargo audit:
  stage: Test
  needs: ['x86_64 linux build']
  tags:
    - docker
    - linux
    - metal
  cache:
    key: x86_64-linux-build-cache-$CI_COMMIT_REF_SLUG
    paths:
      - cargo/
      - target/
    policy: pull
  except:
    - tags
  only:
    - master
    - merge_requests
  script:
    - cargo make audit

###############
# STAGE: Bridges
#
# This stage generates static libraries and wrappers for specific target *platform*. Those artifacts
# are then passed to the Bindings stage.
#
# Windows libraries are not generated in this stage as we do not plan to support more than one
# (ie. C#) binding for pc-windows target and thus, the libraries would not be reusable.

x86_64_linux ffi:
  stage: Bridges
  tags:
    - docker
    - linux
    - metal
  script:
    - bash docker/base.sh
  cache:
    - key: x86_64-bindings-build-cache-$CI_COMMIT_REF_SLUG
      paths:
        - cargo/
        - target/
      policy: pull
    - key: lib-x86_64-linux-gnu-$CI_PIPELINE_ID
      paths:
        - ffi_build/
        - ffi_tests/
      policy: push
  only:
    - master
    - merge_requests

apple:
  stage: Bridges
  only:
    - master
    - develop
    - merge_requests
  tags:
    - macos
  script:
    - CLOUD_CREDENTIALS=`mktemp`
    - chmod 600 $CLOUD_CREDENTIALS
    - echo $APPLE_GCS_BUCKET_UPLODAER_ACCT | base64 -d > $CLOUD_CREDENTIALS
    - CLOUD_CREDENTIALS=$CLOUD_CREDENTIALS ci/build_apple.sh
    - rm $CLOUD_CREDENTIALS
  artifacts:
    paths:
      - wildlandx_macos.build/out_dir/wildlandx.xcframework.zip

################
# STAGE: Bindings
#
# This stage generates bindings for target language *and* platform. The jobs in this stage (apart
# from Windows builds) use artifacts from the Bridges stage to generate the forementioned bindings.
#
# Artifacts from this stage are used as the pipeline artifacts and/or release assets.

# csharp x86_64 windows-msvc:
#  stage: Bindings
#  image:
#    name: registry.gitlab.com/wildland/corex/wildland-core/builder:win32-ltsc2022
#  script:
#    - echo $env:CI_PROJECT_DIR
#    - $ErrorActionPreference = 'Stop'
#    - $ProgressPreference = 'SilentlyContinue'
#    - Powershell.exe -File "$env:CI_PROJECT_DIR/docker/scripts/bindings_csharp-win64.ps1"
#  artifacts:
#    expose_as: 'csharp-x86_64-windows-msvc'
#    name: csharp-x86_64-windows-msvc
#    paths:
#      - build/
#    expire_in: 1 week
#  tags:
#    - docker
#    - windows
#    - x64
#  rules:
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
#    - if: $CI_COMMIT_BRANCH == "master"
#    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
#      when: manual
#      allow_failure: true

csharp x86_64 linux:
  stage: Bindings
  needs: ['x86_64_linux ffi']
  script:
    - rm -r /ffi_build && mv ${CI_PROJECT_DIR}/ffi_build /ffi_build
    - rm -r /ffi_tests && mv ${CI_PROJECT_DIR}/ffi_tests /ffi_tests
    - bash docker/scripts/bindings_csharp-x64-86-linux.bash
    - mv /out ${CI_PROJECT_DIR}/build
  artifacts:
    expose_as: 'csharp-x86_64-linux-gnu'
    name: csharp-x86_64-linux-gnu
    paths:
      - build/
    expire_in: 1 week
  cache:
    key: lib-x86_64-linux-gnu-$CI_PIPELINE_ID
    paths:
      - ffi_build/
      - ffi_tests/
    policy: pull
  tags:
    - docker
    - linux
    - metal
  only:
    - master
    - merge_requests

# minreq (http client) does not compile on target wasm32-unknown-emscripten
# webassembly emscripten linux:
#   stage: Bindings
#   needs: ['cargo test', 'x86_64 linux build']
#   script:
#     - BUILD_TARGET=wasm32-unknown-emscripten PROJECT_DIR=${CI_PROJECT_DIR} bash docker/build.sh
#     - PROJECT_DIR=${CI_PROJECT_DIR} bash docker/scripts/bindings_wasm.bash
#     - mv /out ${CI_PROJECT_DIR}/build
#   artifacts:
#     expose_as: 'wasm'
#     name: wasm
#     paths:
#       - build/
#     expire_in: 1 week
#   tags:
#     - docker
#     - linux
#     - metal
#   only:
#     - master
#     - merge_requests

swift x86_64 linux:
  stage: Bindings
  needs: ['x86_64_linux ffi']
  script:
    - rm -r /ffi_build && mv ${CI_PROJECT_DIR}/ffi_build /ffi_build
    - rm -r /ffi_tests && mv ${CI_PROJECT_DIR}/ffi_tests /ffi_tests
    - bash docker/scripts/bindings_swift-x64-86-linux.bash
    - mv /out ${CI_PROJECT_DIR}/build
  artifacts:
    expose_as: 'swift-x86_64-linux-gnu'
    name: swift-x86_64-linux-gnu
    paths:
      - build/
    expire_in: 1 week
  cache:
    key: lib-x86_64-linux-gnu-$CI_PIPELINE_ID
    paths:
      - ffi_build/
      - ffi_tests/
    policy: pull
  tags:
    - docker
    - linux
    - metal
  only:
    - master
    - merge_requests

###############
# STAGE: Deploy
#
# This stage is the last stage in which the crates are published to the registry. 

publish crates:
  stage: Deploy
  tags:
    - docker
    - linux
    - metal
  except:
    - tags
    - docs/*
  only:
    - master
  dependencies: [] # Disable artifacts passing
  cache: {} # Disable cache from first-stage jobs
  before_script:
    - git config --global user.name "Wildland Housekeeper"
    - git config --global user.email "$HOUSEKEEPER_EMAIL"
  variables:
    # We cannot have dirty tree in the build directory for release
    CARGO_HOME: /tmp/cargo_home
  script:
    - git remote set-url origin "https://wildland-bot:$HOUSEKEEPER_CI_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git reset --hard remotes/origin/$CI_COMMIT_BRANCH
    - git checkout -B $CI_COMMIT_BRANCH --track remotes/origin/$CI_COMMIT_BRANCH
    - RUST_LOG=debug cargo $CARGO_FLAGS release -v --registry wl-dev --workspace --no-confirm --execute release

pages-mld:
  image: registry.gitlab.com/wildland/corex/wildland-core/esv_mdbook:0.3.2
  stage: docs
  dependencies: [] # Disable conflicting artifacts pulling from Bindinds stage
  except:
    - tags
  script:
    - mkdir -p .docs/mld
    - mdbook-mermaid install .
    - mdbook build
  artifacts:
    paths:
      - .docs/lld
    untracked: true
    expire_in: 2h
  only:
    refs:
      - master

pages-lld:
  stage: docs
  dependencies: [] # Disable conflicting artifacts pulling from Bindinds stage
  except:
    - tags
  script:
    - cargo make lld-docs
  artifacts:
    paths:
      - .docs/lld
    untracked: true
    expire_in: 2h
  only:
    refs:
      - master

pages-publish:
  image: google/cloud-sdk
  stage: docs
  except:
    - tags
  needs:
    - job: pages-mld
    - job: pages-lld
  dependencies: 
    - pages-lld
    - pages-mld
  script:
    - echo -n $DOCS_WILDLAND_GCS_UPLOADER_KEY | base64 -d > /credentials.json
    - gcloud auth activate-service-account --key-file=/credentials.json
    - gsutil -m rsync -d -r .docs/mld gs://docs.wildland.dev/docs/wildland/mld
    - gsutil -m rsync -d -r .docs/lld gs://docs.wildland.dev/docs/wildland/lld
  only:
    refs:
      - master
